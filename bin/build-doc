#!/usr/bin/env node
const replace = require('replace-in-file');
const requireIndex = require('requireindex');

const allRules = requireIndex(__dirname + '/../lib/rules');

let docSection = '';
// First build a Table Of Content
Object.keys(allRules).forEach((ruleId) => {
  docSection += `- [\`${ruleId}\`](#${ruleId})\n`;
});
docSection += '\n';

// Create a documentation section for each rule.
Object.keys(allRules).forEach((ruleId) => {
  const { meta } = allRules[ruleId];
  const { docs } = meta;

  const { examples } = require(__dirname + `/../tests/lib/rules/${ruleId}`);

  docSection += `
### \`${ruleId}\`

${docs.description}:

\`\`\`js
// BAD
${examples.invalid[0].code}

// GOOD
${examples.valid[0]}
\`\`\`
`;

  if (meta.fixable) {
    docSection += `
:wrench: Use the ESLint \`--fix\` option on the command line to automatically fixes problems reported by this rule.
`;
  }

  if (docs.githubIssue) {
    docSection += `
:bulb: We enforce this rule because of the following issue: ${docs.githubIssue}.
`;
  }

  if (!docs.recommended) {
    docSection += `
:warning: This rule is not part of the \`recommended\` preset.
`;
  }
});

replace.sync({
  files: `${__dirname}/../README.md`,
  from: /(<!--DOC_START-->\n)[\s\S]*(\n<!--DOC_END-->)/,
  to: `$1${docSection}$2`,
});
